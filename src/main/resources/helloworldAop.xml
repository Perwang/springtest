<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">


<bean id="helloWorldService" class="com.spring.resource.aop.test.HelloWorldService"/>

<bean id="aspect" class="com.spring.resource.aop.test.HelloWorldAspect"/>
<aop:config>
	<!-- 切入点  就是指哪些类或者包要被其他的切面通知切入 -->
	<aop:pointcut id="pointcut" expression="execution(* com.spring.resource.aop..*.*(..))"/>
<!-- 	<aop:aspect ref="aspect"> -->
<!-- 		<aop:before pointcut-ref="pointcut" method="beforeAdvice"/> -->
<!-- 		<aop:after pointcut="execution(* com.spring.resource.aop..*.*(..))" -->
<!-- 			method="afterFinallyAdvice" /> -->
<!-- 	</aop:aspect> -->
	
	<!--当aop里切面的通知方法包含了参数，要保证在excution中的参数名称和arg-name的名称一致-->
	<aop:aspect ref="aspect"><!-- 切面是指具体要编织进去的类，比如logUtils.  起毛包含了切入点及 通知    其中通知就是切面类的方法而已-->
                  
<!--        <aop:before pointcut="execution(* com.spring.resource.aop..*.*(..)) and args(para,n)" method="beforeAdvice(java.lang.String,java.lang.String)"  -->
<!--                   arg-names="para,n"/> -->
                  
                  <!-- arg-names 与returing的值要保持一致，这个主要是为了获取到返回值，然后对返回值进行记录等，不能对返回值进行修改 -->
<!--        <aop:after-returning pointcut="execution(* com.spring.resource.aop..*.*(..))" method="afterReturningAdvice"  -->
<!--                  arg-names="retVal"   returning="retVal"/> -->
              <!-- 用来对目标对象的异常类进行处理，其中arg-names与throwing名字必须一样。带参数的处理 -->   
        <aop:after-throwing pointcut="execution(* com.spring.resource.aop..*.*(..))" method="afterThrowingAdvice" 
                 arg-names="exception" throwing="exception"/>
                 <!-- 用来对目标对象的异常类进行处理，其中arg-names与throwing名字必须一样。不带参数的处理 -->   
<!--                  <aop:after-throwing pointcut="execution(* com.spring.resource.aop..*.*(..))"  -->
<!-- method="afterThrowingAdvice" /> -->
        
       <!-- 环绕的执行方法，可以修改返回值等动作 -->
       <aop:around pointcut="execution(* com.spring.resource.aop..*.sayAround(..))" 
           method="aroundAdvice"/>
       
       <aop:declare-parents types-matching="com.spring.resource.aop..*.IHelloWorldService+"                  
 implement-interface="com.spring.resource.aop.ref.test.IIntroductionService"                        
 default-impl="com.spring.resource.aop.ref.test.IntroductiondService"/>
       
</aop:aspect>
	
	
</aop:config>

</beans>